import os
import difflib
from datetime import datetime
from typing import Dict, List, Set, Optional


def find_project_root(required_paths: Optional[List[str]] = None) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞, –¥–≤–∏–≥–∞—è—Å—å –æ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –≤–≤–µ—Ä—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    ---------
    required_paths : List[str], optional
        –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏/–∏–ª–∏ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥—ë—Ç –Ω–∞ –∏—Ö —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ç–æ—Ä–æ–π –∏–¥—ë—Ç –ø–æ–∏—Å–∫).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    str
        –ü—É—Ç—å –∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–º—É –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ,
        –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç.
    """
    if required_paths is None:
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º.
        return os.path.dirname(os.path.abspath(__file__))

    current_dir = os.path.dirname(os.path.abspath(__file__))

    while True:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—É—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if all(os.path.exists(os.path.join(current_dir, path)) for path in required_paths):
            return current_dir

        # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
        parent_dir = os.path.dirname(current_dir)

        # –ï—Å–ª–∏ —É–∂–µ –≤—ã—à–µ –Ω–µ–∫—É–¥–∞ –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if parent_dir == current_dir:
            # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
            return os.path.dirname(os.path.abspath(__file__))

        current_dir = parent_dir


def get_project_structure(
        start_path: str,
        indent: str = '  ',
        excluded_directories: Optional[List[str]] = None,
        excluded_extensions: Optional[Set[str]] = None
) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    start_path : str
        –ü—É—Ç—å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ö–æ–¥ (–æ–±—ã—á–Ω–æ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –æ–¥–Ω–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π).
    indent : str
        –û—Ç—Å—Ç—É–ø –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π/—Ñ–∞–π–ª–æ–≤.
    excluded_directories : List[str], optional
        –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
    excluded_extensions : Set[str], optional
        –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å.
    """
    if excluded_directories is None:
        excluded_directories = []
    if excluded_extensions is None:
        excluded_extensions = set()

    structure = []

    for root, dirs, files in os.walk(start_path):
        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs[:] = [d for d in dirs if d not in excluded_directories]

        level = root.replace(start_path, '').count(os.sep)
        indent_str = indent * level

        folder = os.path.basename(root)
        if level == 0:
            structure.append(f"{folder}/")
        else:
            structure.append(f"{indent_str}{folder}/")

        subindent = indent * (level + 1)
        for f in sorted(files):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã —Å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
            if any(f.endswith(ext) for ext in excluded_extensions):
                continue
            structure.append(f"{subindent}{f}")

    return '\n'.join(structure)


class ProjectSnapshot:
    def __init__(self, snapshot_file: str = "project_snapshot.txt", required_paths: Optional[List[str]] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–Ω–∏–º–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        ----------
        snapshot_file : str
            –ò–º—è (–∏–ª–∏ –ø—É—Ç—å) —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å–Ω–∏–º–æ–∫.
        required_paths : List[str], optional
            –°–ø–∏—Å–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏/–∏–ª–∏ —Ñ–∞–π–ª–æ–≤, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä—ã—Ö –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è "–∫–æ—Ä–µ–Ω—å" –ø—Ä–æ–µ–∫—Ç–∞.
            –ï—Å–ª–∏ None, –±–µ—Ä—ë—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –ª–µ–∂–∏—Ç —Å–∫—Ä–∏–ø—Ç.
        """
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º, –µ—Å–ª–∏ required_paths –Ω–µ —É–∫–∞–∑–∞–Ω—ã)
        self.project_root = find_project_root(required_paths=required_paths)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å–Ω–∏–º–∫–∞ –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∫—Ä–∏–ø—Ç
        script_dir = os.path.dirname(os.path.abspath(__file__))
        self.snapshot_file = os.path.join(script_dir, snapshot_file)

        self.previous_snapshots: Dict[str, str] = {}

        print(f"\nüìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: {self.project_root}")
        print(f"üìÑ –§–∞–π–ª —Å–Ω–∏–º–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤: {self.snapshot_file}")

        self.load_previous_snapshots()

    def load_previous_snapshots(self) -> None:
        """
        –°—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–Ω–∏–º–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç) –∏
        –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å self.previous_snapshots —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞.
        """
        if not os.path.exists(self.snapshot_file):
            print("‚ÑπÔ∏è  –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–Ω–∏–º–∫–∞")
            return

        try:
            with open(self.snapshot_file, 'r', encoding='utf-8') as f:
                content = f.read()
                # –û—Ç–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –æ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                if "Project Structure:" in content:
                    content = content.split("End Project Structure", 1)[1]

                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é '====...'
                sections = content.split('=' * 50 + '\n')

                current_file = None
                current_content = []
                in_final_content = False

                for section in sections:
                    if not section.strip():
                        continue

                    lines = section.strip().split('\n')
                    for line in lines:
                        if line.startswith('File: '):
                            # –ï—Å–ª–∏ –º—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –∫–∞–∫–æ–π-—Ç–æ —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                            if current_file and current_content:
                                self.previous_snapshots[current_file] = '\n'.join(current_content)

                            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é —Ñ–∞–π–ª–∞
                            current_file = line.replace('File: ', '').strip()
                            current_content = []
                            in_final_content = False

                        elif line.strip() == "FINAL CONTENT:":
                            # –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∏–¥—ë—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                            in_final_content = True
                            current_content = []

                        elif line.strip() and not line.startswith('Snapshot created at:'):
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –±–ª–æ–∫–µ FINAL CONTENT
                            if in_final_content and not any(line.startswith(x) for x in ['NEW', 'DELETED']):
                                current_content.append(line)

                # –ü–æ—Å–ª–µ —Ü–∏–∫–ª–∞ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
                if current_file and current_content:
                    self.previous_snapshots[current_file] = '\n'.join(current_content)

        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–Ω–∏–º–∫–∞: {e}")
            self.previous_snapshots = {}

    def create_snapshot(
            self,
            included_directories: List[str],
            included_extensions: Set[str],
            excluded_directories: Optional[List[str]] = None,
            excluded_extensions: Optional[Set[str]] = None
    ) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å–Ω–∏–º–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö `included_directories`
        —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ `included_extensions`. –ü—Ä–∏ —ç—Ç–æ–º –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ `excluded_directories`
        –∏ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏ –∏–∑ `excluded_extensions`.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        -----------
        bool : –±—ã–ª–∏ –ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è (True/False).
        """
        if excluded_directories is None:
            excluded_directories = []
        if excluded_extensions is None:
            excluded_extensions = set()

        current_snapshots = {}
        changes_detected = False
        new_files = []
        modified_files = []
        deleted_files = []

        print("\nüîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...")

        # –°–±–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        for directory in included_directories:
            directory_path = os.path.join(self.project_root, directory)
            if not os.path.exists(directory_path):
                continue

            for root, dirs, files in os.walk(directory_path):
                # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                dirs[:] = [d for d in dirs if d not in excluded_directories]

                for file in files:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ñ–∞–π–ª –ø–æ–¥ –≤–∫–ª—é—á–∞–µ–º—ã–µ –∏ –Ω–µ –∏—Å–∫–ª—é—á—ë–Ω –ª–∏ –æ–Ω
                    if any(file.endswith(ext) for ext in included_extensions):
                        if any(file.endswith(ext) for ext in excluded_extensions):
                            continue  # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                        file_path = os.path.join(root, file)
                        try:
                            with open(file_path, 'r', encoding='utf-8') as f:
                                content = f.read()
                                rel_path = os.path.relpath(file_path, self.project_root)
                                current_snapshots[rel_path] = content
                        except Exception as e:
                            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        for file_path, current_content in current_snapshots.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–Ω–∏–º–∫–µ
            if file_path not in self.previous_snapshots:
                new_files.append(file_path)
                changes_detected = True
            else:
                prev_content = self.previous_snapshots[file_path]
                if prev_content != current_content:
                    modified_files.append(file_path)
                    changes_detected = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for old_file in self.previous_snapshots:
            if old_file not in current_snapshots:
                deleted_files.append(old_file)
                changes_detected = True

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if new_files:
            print("\n‚ú® –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã:")
            for file in new_files:
                print(f"   + {file}")

        if modified_files:
            print("\nüìù –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for file in modified_files:
                print(f"   ~ {file}")

        if deleted_files:
            print("\nüóëÔ∏è  –£–¥–∞–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for file in deleted_files:
                print(f"   - {file}")

        if not changes_detected:
            print("\n‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            return False

        # –ó–∞–ø–∏—Å—å —Å–Ω–∏–º–∫–∞
        try:
            with open(self.snapshot_file, 'w', encoding='utf-8') as f:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
                f.write("Project Structure:\n")
                f.write("=" * 50 + "\n")
                for directory in included_directories:
                    directory_path = os.path.join(self.project_root, directory)
                    if os.path.exists(directory_path):
                        f.write(
                            get_project_structure(
                                directory_path,
                                excluded_directories=excluded_directories,
                                excluded_extensions=excluded_extensions
                            ) + "\n"
                        )
                f.write("=" * 50 + "\n")
                f.write("End Project Structure\n\n")

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                f.write(f"Snapshot created at: {timestamp}\n\n")

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
                for file_path, current_content in sorted(current_snapshots.items()):
                    f.write('=' * 50 + '\n')
                    f.write(f"File: {file_path}\n")
                    f.write('=' * 50 + '\n')

                    if file_path in new_files:
                        # –ù–æ–≤—ã–π —Ñ–∞–π–ª
                        f.write("NEW\n")
                        f.write(current_content + '\n')
                        f.write("\nFINAL CONTENT:\n")
                        f.write(current_content + '\n')
                    else:
                        prev_content = self.previous_snapshots.get(file_path, '')
                        if prev_content != current_content:
                            # –ò–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª
                            diff = list(difflib.unified_diff(
                                prev_content.splitlines(),
                                current_content.splitlines(),
                                fromfile=file_path,
                                tofile=file_path,
                                lineterm=''
                            ))
                            f.write('\n'.join(diff) + '\n')
                            f.write("\nFINAL CONTENT:\n")
                            f.write(current_content + '\n')
                        else:
                            # –§–∞–π–ª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª—è–µ–º FINAL CONTENT –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
                            f.write("\nFINAL CONTENT:\n")
                            f.write(current_content + '\n')

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                for file_path in deleted_files:
                    f.write('=' * 50 + '\n')
                    f.write(f"File: {file_path}\n")
                    f.write('=' * 50 + '\n')
                    f.write("DELETED\n")

            print(f"\nüíæ –°–Ω–∏–º–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {self.snapshot_file}")
            print(f"‚è∞ –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {timestamp}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–Ω–∏–º–∫–∞: {e}")
            return False


def main():
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞...")

    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

    snapshot = ProjectSnapshot(
        snapshot_file="project_snapshot.txt",
        required_paths=['.']
    )

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ –ø—Ä–æ–µ–∫—Ç–∞
    project_path = os.path.join(os.getcwd())
    print(f"–°–∫–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ –ø—É—Ç–∏: {project_path}")

    included_directories = [
        'src',           # –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ React Native
        'app',           # –î–ª—è –Ω–æ–≤–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã Expo
        'assets',        # –ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç.–¥.
        'components',    # React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        'screens',       # –≠–∫—Ä–∞–Ω—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        'navigation',    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        'hooks',         # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ö—É–∫–∏
        'utils',         # –£—Ç–∏–ª–∏—Ç—ã
        'services',      # –°–µ—Ä–≤–∏—Å—ã (API –∏ —Ç.–¥.)
        'store'         # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Redux/Context)
    ]

    included_extensions = {
        '.js', '.jsx',   # JavaScript —Ñ–∞–π–ª—ã
        '.ts', '.tsx',   # TypeScript —Ñ–∞–π–ª—ã
        '.json',         # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        '.native.js',    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è React Native —Ñ–∞–π–ª—ã
        '.style.js',     # –§–∞–π–ª—ã —Å—Ç–∏–ª–µ–π
        '.config.js'     # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    }

    excluded_directories = [
        'node_modules',
        '.expo',
        '.expo-shared',
        'build',
        'dist',
        '.git',
        'android',      # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        'ios',          # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        'web-build',    # –í–µ–±-—Å–±–æ—Ä–∫–∞ Expo
        'coverage'      # –§–∞–π–ª—ã –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–æ–≤
    ]

    excluded_extensions = {
        '.log',
        '.lock',
        '.expo',
        '.gradle',
        '.pbxproj',
        '.xcworkspace',
        '.idea',
        '.vscode',
        '.DS_Store'
    }

    snapshot.create_snapshot(
        included_directories=included_directories,
        included_extensions=included_extensions,
        excluded_directories=excluded_directories,
        excluded_extensions=excluded_extensions
    )


if __name__ == "__main__":
    main()
